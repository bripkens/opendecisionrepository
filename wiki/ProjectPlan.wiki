#labels Phase-Requirements
*Table of Contents*

<wiki:toc max_depth="2" />

=Introduction=
This document describes the Open Decision Repository (ODR) project, which is commissioned by the Software Engineering and Architecture group (SEARCH) of the University of Groningen. The goal of this project is to develop a freely available decision repository, which allows the user to document their architectural decisions in software projects. This project will be realized as an internship project by two students from the Fontys University of Applied Sciences in Venlo.  As a result, no budget is needed and the estimated time for the realization is set to 100 working days. 
The ODR is an online repository, which provides the functionality to document all architectural decisions. This enables a chronological view of every architectural decision, which allows you to reconstruct architectural decisions in an easy and fast way. In addition, you can see which stakeholder is responsible for every architectural step in the project and the dependencies of all decisions. 




= Stakeholders =
Two groups of stakeholders can be identified. The first group are the customers. Customers are the originators of the project and among other things interested in the project progress. Software Engineers make up the second group. Potential users of the system like Software Architects could be represented as a third group. This group hasn't been included since the community of potential users is not aware of this product and has therefore no specific requirements or expectations.

|| *Name* || *Group* ||
|| Uwe van Heesch || Customer ||
|| Paris Avgeriou || Customer ||
|| Stefan Arians || Software Engineer ||
|| Ben Ripkens || Software Engineer ||


= Project Resources =

== Hardware requirements ==
It is necessary that both of the developer have a computer with internet connection. 





== Software requirements ==
At first we decided to use a versioning server. It helps to jump between different versions of the project. Furthermore we want to share our project documents using a wiki. Because of that we defined to use the GoogleCode platform.  This offers a Subversion server and a wiki and it is free accessible, so we can share our project with everyone. 




=Risk management =
Itâ€™s very important to spend some thought on project risks. This project will be realized by only two software engineers that means, probable risks have to be taken into account.


== Usage of IceFaces 2.0 Beta 1 ==
It's always a high risk to use beta versions. It's prone to a high amount of errors and security risks. Yet the final version of IceFaces 2.0 is to be released in November. IceFaces is still to be favoured because it can make use of glassfish v3, java ee6, jsf 2.0.

== Sickness ==
Since the team only consists of two members, a serious sickness is dangerous. This risk can't be managed.


== Late requirement changes ==
Visualizations of architectural decisions are part of a paper by Mr. Uwe van Heesch and Prof. dr. ir Paris Avgeriou. Since it is yet to be released requirement changes are likely to occur. Since we are using Scrum with a sprint duration of two weeks we can quickly react on requirement changes.


== Wrong time estimation ==
Correct time estimation is difficult since both team members have only limited knowledge. Managing this risk isn't easy, one solution is the development process. Scrum helps to improve time estimation since small work packages are chosen in every iteration. At the end of each sprint the retrospective allows to adapt the work load for the next sprint.


== Risk table ==
|| *Risk* || *Probability* || *Effect* ||
||Usage of IceFaces 2.0 Beta 1||Moderate||Serious||
||Sickness||Moderate||Catastrophic||
||Late requirement changes||Likely||Serious||
||Wrong time estimation||Likely||Serious||


=Project schedule =
In this Project, Scrum will be used. Scrum is an agile software development method for project management. The entire project time is divided into nine sprints and a four week analysis and design phase. One sprint takes two weeks. After every sprint, the customer will be informed about the project and gets a delivery. In the following figure you can see a detailed view about the schedule.

http://opendecisionrepository.googlecode.com/svn/wiki/images/schedule.png