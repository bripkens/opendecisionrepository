<wiki:toc max_depth="3" />

= Overview =
The Open Decision Repository has a history of performance and load issues. Many of these issues could be traced to missing caching, [inefficient usage of] certain technologies, e.g., Icefaces and JPA and additional security measures, e.g., password hashing and encrypted server communication (HTTPS). Some changes were made to the ODR in order to improve the performance. This page lists these activities for further reference.

= Changes for performance optimization =

== Caching ==
The most critical load issue came through the usage of Icefaces 2.0.0 and missing caching functionality. With Icefaces 2.0.0, on each request, more than 60 files had to be retrieved. This means that 60 additional HTTP requests were sent to the server. Unfortunately, this problem can't be fixed by the Open Decision Repository developers, but instead must be fixed by the Icefaces developers. [http://jira.icefaces.org/browse/ICE-6597 The problem was reported] but isn't going to be fixed until Icefaces 3 is released.

For a quick fix, a [http://code.google.com/p/opendecisionrepository/source/browse/trunk/sources/web-interface/src/main/java/nl/rug/search/odr/IcefacesStaticCacheFilter.java HTTP servlet filter] was added which simply sets HTTP caching headers. It's clear that this measure only covers part of the problem, i.e., on the first request these files still need to be loaded.

_In case you are wondering whether the files may be cached for too long - a hash (in the current implementation a simple timestamp) [http://code.google.com/p/opendecisionrepository/source/browse/trunk/sources/web-interface/src/main/java/nl/rug/search/odr/controller/ResourceHashController.java is generated] and added as a query parameter to the static resources' URLs. This forces the browser to reload the resources (useful when updating the application)._

To further improve performance, a caching proxy, e.g., [http://www.squid-cache.org/ squid],  should be added. This would drastically improve the ODR's performance as the biggest performance-bottleneck is the delivery of static resources.

== Password hashing ==

== Read-only transactions ==
Since the ODR makes use of Enterprise JavaBeans (EJB), the Java Transaction API (JTA) and Java Persistence 2.0 (JPA), a small window for improvement was identified, i.e., data is mostly read from the ODR in a transaction-aware way. Transaction awareness is costly and was therefore deactivated by default for read-only operations.

_Expressed in a more technical way: The JTA transaction attribute was set to 'supported' for read-only methods._

== Encrypted server communication ==


 * read only transaction type
 * effect of tls on performance
 * password encryption algorithm
 * changed amount of thread reuse to 10,000, i.e., uses the same HTTP worker thread for more than one request (simple: 211.1 req/sec and 194.6 kb/sec; complex: 65.0 req/sec and 1260.3 kb/sec)
 * verified after application redeploy (to verify that no code was optimized by the JVM), same values as written above